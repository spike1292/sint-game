/**
 * angular-kickstart - Speed up your AngularJS development whith a great build system.
 * @version v1.0.2
 * @link https://github.com/vesparny/angular-kickstart
 * @license MIT
 */
!function(){"use strict";function config($stateProvider,$urlRouterProvider,$logProvider,$httpProvider){$urlRouterProvider.otherwise("/"),$logProvider.debugEnabled(!0),$httpProvider.interceptors.push("httpInterceptor"),$stateProvider.state("root",{views:{header:{templateUrl:"src/common/header.tpl.html",controller:"HeaderCtrl"},footer:{templateUrl:"src/common/footer.tpl.html",controller:"FooterCtrl"}}})}function MainCtrl($log){$log.debug("MainCtrl laoded!")}function run($log){$log.debug("App is running!")}angular.element(document).ready(function(){angular.bootstrap(document,["app"])}),config.$inject=["$stateProvider","$urlRouterProvider","$logProvider","$httpProvider"],MainCtrl.$inject=["$log"],run.$inject=["$log"],angular.module("app",["ui.router","home","question01","question-puzzle","question-x","question-pieten","question-rebus","question-holy","finish","common.header","common.footer","common.services.data","common.directives.version","common.filters.uppercase","common.interceptors.http","templates"]).config(config).run(run).controller("MainCtrl",MainCtrl).value("version","1.0.2")}(),function(){"use strict";function config($stateProvider){$stateProvider.state("root.home",{url:"/",views:{"@":{templateUrl:"src/app/home/home.tpl.html",controller:"HomeCtrl as home"}}})}function HomeCtrl($state){this.start=function(){$state.go("root.question01")}}config.$inject=["$stateProvider"],HomeCtrl.$inject=["$state"],angular.module("home",[]).config(config).controller("HomeCtrl",HomeCtrl)}(),function(){"use strict";function config($stateProvider){$stateProvider.state("root.question01",{url:"/question01",views:{"@":{templateUrl:"src/app/question01/question01.tpl.html",controller:"FirstQuestionCtrl as question"}}})}function FirstQuestionCtrl($state){this.answers=["met je knecht","met je slaaf","Er komt hier helemaal niemand binnen!","Ze zijn al geweest van het Liliane Fonds"],this.next=function(){this.myAnswer===this.answers[0]?$state.go("root.question-x"):this.error=!0}.bind(this)}config.$inject=["$stateProvider"],FirstQuestionCtrl.$inject=["$state"],angular.module("question01",[]).config(config).controller("FirstQuestionCtrl",FirstQuestionCtrl)}(),function(){"use strict";function config($stateProvider){$stateProvider.state("root.question-puzzle",{url:"/question-puzzle",views:{"@":{templateUrl:"src/app/question-puzzle/question-puzzle.tpl.html",controller:"PuzzleQuestionCtrl as question"}}})}function PuzzleQuestionCtrl($state){this.matrix=[["D","E","S","C","H","I","M","M","E","L","S","U","R","E"],["P","T","R","E","I","S","S","E","M","B","L","I","J","G"],["R","E","S","S","K","R","U","I","D","N","O","T","E","N"],["E","I","T","I","Z","E","J","R","E","L","S","M","S","T"],["B","P","O","R","O","T","G","O","C","J","A","K","E","M"],["M","E","O","P","E","T","I","E","I","Y","N","A","A","N"],["E","P","M","R","T","E","N","L","Z","A","D","A","R","Z"],["C","E","B","U","D","L","G","D","T","E","N","N","P","S"],["E","R","O","S","I","N","T","E","R","K","L","A","A","S"],["D","N","O","V","A","S","E","J","K","A","P","L","E","C"],["A","O","T","L","E","T","R","O","W","D","A","F","I","F"],["S","T","R","O","O","I","G","O","E","D","A","P","I","G"],["N","E","E","T","S","R","O","O","H","C","S","U","T","O"],["V","N","E","O","H","C","S","G","E","D","I","C","H","T"]],this.words=["BOMEN","CANDYCRUSH","DAK","DECEMBER","FIFA","GEDICHT","GEZELLIG","IPAD","KRUIDNOTEN","LAARS","LETTER","MAAN","MIJTER","PAARD","PAKJESAVOND","PEPERNOTEN","PIET","ROE","SCHIMMEL","SCHOEN","SCHOORSTEEN","SINTERKLAAS","SPANJE","STOOMBOOT","STROOIGOED","SURPRISE","TANKS","VERLANGLIJSTJE","WORTEL","ZAK","ZOET"],this.next=function(){(""+this.myAnswer).toLowerCase()==="De surprise ligt in de auto".toLowerCase()?$state.go("root.finish"):this.error=!0}.bind(this)}function WordSearchPuzzleFactory(){function WordSearchPuzzle(matrix,words){var maxRow=0,maxCol=0;this.matrix=[],this.words=[],this.solved=!1,angular.forEach(matrix,function(letters,row){angular.forEach(letters,function(letter,col){var item={letter:letter,col:col,row:row,used:!1};this.matrix[row]||(this.matrix[row]=[]),this.matrix[row].push(item),maxCol=col},this),maxRow=row},this),angular.forEach(words,function(word){this.words.push({name:word})},this),this.getItem=function(col,row){return this.matrix[row]?this.matrix[row][col]:void 0},this.getItems=function(colFrom,rowFrom,colTo,rowTo){var items=[];if(rowTo>maxRow&&(rowTo=maxRow),colTo>maxCol&&(colTo=maxCol),void 0===this.getItem(colTo,rowTo))return items;if(colFrom===colTo||rowFrom===rowTo||Math.abs(colTo-colFrom)===Math.abs(rowTo-rowFrom)){var shiftX=colFrom===colTo?0:colTo>colFrom?1:-1,shiftY=rowFrom===rowTo?0:rowTo>rowFrom?1:-1,col=colFrom,row=rowFrom;items.push(this.getItem(col,row));do col+=shiftX,row+=shiftY,items.push(this.getItem(col,row));while(col!==colTo||row!==rowTo)}return items},this.lookup=function(items){if(items.length){var words=[""];angular.forEach(items,function(item){words[0]+=item.letter}),words.push(words[0].split("").reverse().join("")),this.solved=!0,angular.forEach(this.words,function(word){word.found||(angular.forEach(words,function(itemWord){word.name===itemWord&&(word.found=!0,angular.forEach(items,function(item){item.found=!0}))}),word.found||(this.solved=!1))},this)}},this.solve=function(){var start={},directions={N:[0,-1],E:[1,0],S:[0,1],W:[-1,0],NE:[1,-1],NW:[-1,-1],SE:[1,1],SW:[-1,1]};angular.forEach(this.matrix,function(items){angular.forEach(items,function(item){start[item.letter]||(start[item.letter]=[]),start[item.letter].push(item)})}),angular.forEach(this.words,function(word){angular.forEach(start[word.name.charAt(0)],function(start){word.found||angular.forEach(directions,function(shift){word.found||this.lookup(this.getItems(start.col,start.row,start.col+(word.name.length-1)*shift[0],start.row+(word.name.length-1)*shift[1]))},this)},this)},this)}}return function(matrix,words){return new WordSearchPuzzle(matrix,words)}}function wordSearchPuzzleDirective(wordSearchPuzzle){return{restrict:"EA",replace:!0,template:'<table class="word-search-puzzle" ng-class="{\'puzzle-solved\': puzzle.solved}" handpointerenter="disableScroll()" handpointerleave="enableScroll()"><tr ng-repeat="items in puzzle.matrix"><td ng-repeat="item in items" unselectable="on" ng-class="{\'puzzle-found\': item.found, \'puzzle-selected\': item.selected, \'puzzle-message\': puzzle.solved && !item.found}" handpointerenter="selectEnter(item)" handpointerdown="selectStart(item)" handpointerup="selectEnd()" > <span>{{item.letter}}</span></td></tr></table>',scope:{matrix:"=",words:"=",api:"="},link:function(scope,element,attrs){var selectFrom;scope.$watch("matrix",function(matrix){scope.puzzle=wordSearchPuzzle(matrix,scope.words),attrs.api&&(scope.api=scope.puzzle)}),scope.selected=[],scope.selectStart=function(item){selectFrom=item,angular.element(document.body).css("overflow","hidden"),angular.element(document.body).on("touchmove",function(e){e.preventDefault()})},scope.selectEnter=function(item){selectFrom&&(scope.selected=scope.puzzle.getItems(selectFrom.col,selectFrom.row,item.col,item.row))},scope.disableScroll=function(){angular.element(document.body).css("overflow","hidden")},scope.enableScroll=function(){angular.element(document.body).css("overflow","auto")},scope.selectEnd=function(){selectFrom=null,scope.puzzle.lookup(scope.selected),scope.selected=[],angular.element(document.body).css("overflow","auto"),angular.element(document.body).off("touchmove")},scope.$watch("selected",function(newItems,oldItems){angular.forEach(oldItems,function(item){item.selected=!1}),angular.forEach(newItems,function(item){item.selected=!0})})}}}config.$inject=["$stateProvider"],PuzzleQuestionCtrl.$inject=["$state"],wordSearchPuzzleDirective.$inject=["wordSearchPuzzle"];var question2Module=angular.module("question-puzzle",[]).config(config).factory("wordSearchPuzzle",WordSearchPuzzleFactory).directive("wordSearchPuzzle",wordSearchPuzzleDirective).controller("PuzzleQuestionCtrl",PuzzleQuestionCtrl);angular.forEach("pointerdown pointermove pointerup pointercancel pointerenter pointerleave pointerout pointerover".split(" "),function(eventName){var directiveName="hand"+eventName;question2Module.directive(directiveName,["$parse",function($parse){return function(scope,element,attr){var fn=$parse(attr[directiveName]);element.bind(eventName,function(event){scope.$apply(function(){fn(scope,{$event:event})})})}}])})}(),function(){"use strict";function config($stateProvider){$stateProvider.state("root.question-x",{url:"/question-x",views:{"@":{templateUrl:"src/app/question-x/question-x.tpl.html",controller:"XQuestionCtrl as question"}}})}function XQuestionCtrl($state){this.x=function(){$state.go("root.question-rebus")},this.next=function(){this.error=!0}.bind(this)}config.$inject=["$stateProvider"],XQuestionCtrl.$inject=["$state"],angular.module("question-x",[]).config(config).controller("XQuestionCtrl",XQuestionCtrl)}(),function(){"use strict";function config($stateProvider){$stateProvider.state("root.question-rebus",{url:"/question-rebus",views:{"@":{templateUrl:"src/app/question-rebus/question-rebus.tpl.html",controller:"RebusQuestionCtrl as question"}}})}function RebusQuestionCtrl($state){this.next=function(){(""+this.myAnswer).toLowerCase()==="sinterklaasje kom maar binnen met je knecht".toLowerCase()?$state.go("root.question-holy"):this.error=!0}.bind(this)}config.$inject=["$stateProvider"],RebusQuestionCtrl.$inject=["$state"],angular.module("question-rebus",[]).config(config).controller("RebusQuestionCtrl",RebusQuestionCtrl)}(),function(){"use strict";function config($stateProvider){$stateProvider.state("root.question-pieten",{url:"/question-pieten",views:{"@":{templateUrl:"src/app/question-pieten/question-pieten.tpl.html",controller:"PietenQuestionCtrl as question"}}})}function PietenQuestionCtrl($state){this.next=function(){(""+this.myAnswer).toLowerCase()==="13".toLowerCase()?$state.go("root.question-puzzle"):this.error=!0}.bind(this)}config.$inject=["$stateProvider"],PietenQuestionCtrl.$inject=["$state"],angular.module("question-pieten",[]).config(config).controller("PietenQuestionCtrl",PietenQuestionCtrl)}(),function(){"use strict";function config($stateProvider){$stateProvider.state("root.question-holy",{url:"/question-holy",views:{"@":{templateUrl:"src/app/question-holy/question-holy.tpl.html",controller:"HolyQuestionCtrl as question"}}})}function HolyQuestionCtrl($state){this.answers=["is de tegenpool van de 'schijnheiligman' (Santa Claus)","komt van goede huwelijksman ('goed-hylik man')","is een pauselijke titel","komt van vrome weldoender ('goede heilige man')"],this.next=function(){this.myAnswer===this.answers[1]?$state.go("root.question-pieten"):this.error=!0}.bind(this)}config.$inject=["$stateProvider"],HolyQuestionCtrl.$inject=["$state"],angular.module("question-holy",[]).config(config).controller("HolyQuestionCtrl",HolyQuestionCtrl)}(),function(){"use strict";function config($stateProvider){$stateProvider.state("root.finish",{url:"/finish",views:{"@":{templateUrl:"src/app/finish/finish.tpl.html",controller:"FinishCtrl as finish"}}})}function FinishCtrl($state){this.restart=function(){$state.go("root.home")}}config.$inject=["$stateProvider"],FinishCtrl.$inject=["$state"],angular.module("finish",[]).config(config).controller("FinishCtrl",FinishCtrl)}(),function(){"use strict";function versionDirective(version){return{restrict:"A",link:function(scope,elm){elm.text(version)}}}versionDirective.$inject=["version"],angular.module("common.directives.version",[]).directive("appVersion",versionDirective)}(),function(){"use strict";function httpInterceptor($q,$log){return{request:function(config){return config},requestError:function(rejection){return $log.debug(rejection),$q.reject(rejection)},response:function(response){return $log.debug("response: ",response),response},responseError:function(rejection){return $log.debug(rejection),$q.reject(rejection)}}}httpInterceptor.$inject=["$q","$log"],angular.module("common.interceptors.http",[]).factory("httpInterceptor",httpInterceptor)}(),function(){"use strict";function dataService(){return{get:function(){return["some","data"]}}}angular.module("common.services.data",[]).factory("DataService",dataService)}(),function(){"use strict";function uppercase(){return function(text){return text?text.toUpperCase():text}}angular.module("common.filters.uppercase",[]).filter("uppercase",uppercase)}(),function(){"use strict";function headerCtrl($log){$log.debug("Header loaded")}headerCtrl.$inject=["$log"],angular.module("common.header",[]).controller("HeaderCtrl",headerCtrl)}(),function(){"use strict";function footerCtrl($log){$log.debug("Footer loaded")}footerCtrl.$inject=["$log"],angular.module("common.footer",[]).controller("FooterCtrl",footerCtrl)}(),function(module){try{module=angular.module("templates")}catch(err){module=angular.module("templates",[])}module.run(["$templateCache",function($templateCache){"use strict";$templateCache.put("src/common/footer.tpl.html",'<div class="pure-g">\n  <div class="pure-u-1 text-center">\n    <p>&copy; 2014 - Sint & Piet</a>\n  </div>\n</div>\n')}])}(),function(module){try{module=angular.module("templates")}catch(err){module=angular.module("templates",[])}module.run(["$templateCache",function($templateCache){"use strict";$templateCache.put("src/common/header.tpl.html",'<div class="pure-g">\n  <div class="pure-u-1 text-center island">\n    <img class="pure-img" src="assets/images/sinterklaasquiz.png">\n  </div>\n</div>\n')}])}(),function(module){try{module=angular.module("templates")}catch(err){module=angular.module("templates",[])}module.run(["$templateCache",function($templateCache){"use strict";$templateCache.put("src/app/finish/finish.tpl.html",'<div class="pure-g">\n  <div class="island pure-u-1">\n    <h1>Gefeliciteerd</h1>\n\n    <h2>Je hebt alle vragen <strong>goed beantwoord!</strong></h2>\n\n    <h3>Het antwoord van de woordzoeker is de plek waar je het cadeautje kunt vinden</h3>\n  </div>\n  <div class="island pure-u-1">\n    <input type="submit" ng-click="finish.restart()" value="Nog een keer"\n           class="pure-button button-xlarge button-expanded button-piet">\n  </div>\n</div>\n')}])}(),function(module){try{module=angular.module("templates")}catch(err){module=angular.module("templates",[])}module.run(["$templateCache",function($templateCache){"use strict";$templateCache.put("src/app/home/home.tpl.html",'<div class="pure-g">\n  <div class="island3 pure-u-1 pure-u-lg-2-3">\n    <h1>Welkom bij de Sinterklaas Quiz</h1>\n\n    <h3>Je moet alle vragen goed beantwoorden om locatie van je cadeautje te achterhalen <strong>Succes!</strong></h3>\n  </div>\n  <div class="island3 pure-u-1 pure-u-lg-1-3">\n    <button ng-click="home.start()" class="pure-button button-xlarge button-expanded button-piet">\n      Start\n    </button>\n  </div>\n</div>\n')}])}(),function(module){try{module=angular.module("templates")}catch(err){module=angular.module("templates",[])}module.run(["$templateCache",function($templateCache){"use strict";$templateCache.put("src/app/getting-started/getting-started.tpl.html",'<div class="pure-g island3">\n  <div class="content pure-u-1">\n    <p class="island-panel">\n      <strong>Note that this is only a getting started guide, for more detailed information about the build system, the\n        available tasks, the configuration of the build or anything else, please refer to the <a\n          href="https://github.com/vesparny/angular-kickstart/#readme" target="_blank">documentation</a> on the GitHub\n        project.</strong>\n    </p>\n\n    <h3>What and Why</h3>\n\n    <p>\n      <code>angular-kickstart</code> is an opinionated kickstart for single page application development with AngularJS.\n      It makes your development and testing easy, keeps the structure of the project consistent and allows you to create\n      a fully optimized\n      production release withe ease. After having developed a lot of AngularJS projects I decided to collect here what\n      I\'ve learnt.\n    </p>\n\n    <h3>Getting started</h3>\n\n    <p>\n      Install\n      <strong><a href="https://github.com/joyent/node/wiki/installation" target="_blank">node.js</a></strong>. Then\n      <strong>sass, gulp and bower</strong> if you haven\'t yet.\n    </p>\n\n    <pre>\n    <code>\n      $ gem install sass\n      $ npm -g install gulp bower\n    </code>\n</pre>\n\n    <p>\n      After that, install\n      <code>angular-kickstart</code> - download the <a\n      href="https://github.com/vesparny/angular-kickstart/releases/latest">latest</a> release (or clone the master\n      branch if want to run the development version). Unzip the project and cd into it, then\n      install bower and npm dependencies, and run the application in development mode.\n    </p>\n\n    <pre>\n    <code>\n      $ npm install\n      $ bower install\n      $ gulp serve\n    </code>\n</pre>\n\n    <p>\n      You are now ready to go, your applcation is available at <code>http://127.0.0.1:3000</code>.\n    </p>\n\n    <p>\n      You are now ready to start coding, every file you add, edit or delete into the\n      <code>/client</code> folder, will be handled by the build system and the browser will reload.\n    </p>\n\n    <p>\n      When you are ready to build a production release there is a task for that.\n    </p>\n\n    <pre>\n    <code>\n      $ gulp serve:dist\n    </code>\n</pre>\n\n    <p>\n      This task will lint your code, optimize css js and images files, run unit tests. After the task has successfully\n      finished, you can find an optimized version of your project in the\n      <code>/build/dist</code> folder.\n    </p>\n\n    <p>\n      Other tasks are available:\n    </p>\n\n    <pre>\n    <code>\n      #for developing running unit test on every file change.\n      $ gulp serve:tdd\n\n      #for running e2e test. (you application should be running on http://127.0.0.1:3000)\n      $ gulp test:e2e\n\n      #for running unit tests one time then exit.\n      $ gulp test:unit\n    </code>\n</pre>\n    <p class="text-center">\n      <a href="https://github.com/vesparny/angular-kickstart/#readme" target="_blank"\n         class="pure-button button-xlarge pure-button-primary">\n        Full documentation on GitHub\n      </a>\n    </p>\n\n  </div>\n</div>\n</div>\n')}])}(),function(module){try{module=angular.module("templates")}catch(err){module=angular.module("templates",[])}module.run(["$templateCache",function($templateCache){"use strict";$templateCache.put("src/app/question-holy/question-holy.tpl.html",'<form class="pure-form">\n  <div class="pure-g">\n    <div class="island pure-u-1">\n      <h1>Vraag 4</h1>\n\n      <h3>Goedheiligman</h3>\n    </div>\n    <div class="island pure-u-1">\n      <select ng-model="question.myAnswer" required>\n        <option value="">- Maak een keuze -</option>\n        <option ng-repeat="answer in question.answers" value="{{answer}}">{{answer}}</option>\n      </select>\n\n      <div ng-show="question.error">\n        <p>Dit is niet het juiste antwoord, probeer het nog eens</p>\n      </div>\n    </div>\n    <div class="island pure-u-1">\n      <input ng-click="question.next()" type="submit" value="Volgende"\n             class="pure-button button-xlarge button-expanded button-piet">\n    </div>\n  </div>\n</form>\n')}])}(),function(module){try{module=angular.module("templates")}catch(err){module=angular.module("templates",[])}module.run(["$templateCache",function($templateCache){"use strict";$templateCache.put("src/app/question-pieten/question-pieten.tpl.html",'<form class="pure-form">\n  <div class="pure-g">\n    <div class="island pure-u-1">\n      <h1>Vraag 5</h1>\n\n      <h3>Hoe veel pieten zie jij?</h3>\n    </div>\n    <div class="island pure-u-1">\n      <img src="assets/images/pieten.gif" class="pure-img" alt="pieten">\n    </div>\n    <div class="island pure-u-1">\n      <label>\n        Oplossing\n        <input class="pure-input-1" ng-model="question.myAnswer" type="text" required="">\n      </label>\n\n      <div ng-show="question.error">\n        <p>Dit is niet het juiste antwoord, probeer het nog eens</p>\n      </div>\n    </div>\n    <div class="island pure-u-1">\n      <input ng-click="question.next()" type="submit" value="Volgende"\n             class="pure-button button-xlarge button-expanded button-piet">\n    </div>\n  </div>\n</form>\n')}])}(),function(module){try{module=angular.module("templates")}catch(err){module=angular.module("templates",[])}module.run(["$templateCache",function($templateCache){"use strict";$templateCache.put("src/app/question-puzzle/question-puzzle.tpl.html",'<form class="pure-form">\n  <div class="pure-g word-search">\n    <div class="island pure-u-1">\n      <h1>Sinterklaas Woordzoeker</h1>\n\n      <h3>De overgebleven letters vormen de oplossing</h3>\n    </div>\n    <div class="island pure-u-1 pure-u-md-1-4">\n      <ul class="words">\n        <li ng-repeat="word in question.puzzle.words" ng-class="{\'found\': word.found}">\n          {{word.name}}\n        </li>\n      </ul>\n    </div>\n    <div class="island pure-u-1 pure-u-md-3-4">\n      <word-search-puzzle matrix="question.matrix" words="question.words"\n                          api="question.puzzle"></word-search-puzzle>\n    </div>\n    <!--<div class="status">-->\n    <!--<button ng-click="question.puzzle.solve()" ng-show="!question.puzzle.solved" class="solve">solve</button>-->\n    <!--<strong ng-show="question.puzzle.solved" ng-show="question.puzzle.solved">Solved!</strong>-->\n    <!--</div>-->\n    <div class="island pure-u-1">\n      <label>\n        Oplossing\n        <input class="pure-input-1" ng-model="question.myAnswer" type="text" required="">\n      </label>\n\n      <div ng-show="question.error">\n        <p>Dit is niet het juiste antwoord, probeer het nog eens</p>\n      </div>\n    </div>\n    <div class="island pure-u-1">\n      <input type="submit" value="Volgende" ng-click="question.next()"\n             class="pure-button button-xlarge button-expanded button-piet">\n    </div>\n  </div>\n</form>\n')}])}(),function(module){try{module=angular.module("templates")}catch(err){module=angular.module("templates",[])}module.run(["$templateCache",function($templateCache){"use strict";$templateCache.put("src/app/question-rebus/question-rebus.tpl.html",'<form class="pure-form">\n  <div class="pure-g">\n    <div class="island pure-u-1">\n      <h1>Vraag 3</h1>\n\n      <h3>Wat is de oplossing van deze rebus?</h3>\n    </div>\n    <div class="island pure-u-1">\n      <img src="assets/images/rebus.jpg" class="pure-img" alt="rebus">\n    </div>\n    <div class="island pure-u-1">\n      <label>\n        Oplossing\n        <input class="pure-input-1" ng-model="question.myAnswer" type="text" required="">\n      </label>\n\n      <div ng-show="question.error">\n        <p>Dit is niet het juiste antwoord, probeer het nog eens</p>\n      </div>\n    </div>\n    <div class="island pure-u-1">\n      <input ng-click="question.next()" type="submit" value="Volgende"\n             class="pure-button button-xlarge button-expanded button-piet">\n    </div>\n  </div>\n</form>\n')}])}(),function(module){try{module=angular.module("templates")}catch(err){module=angular.module("templates",[])}module.run(["$templateCache",function($templateCache){"use strict";$templateCache.put("src/app/question-x/question-x.tpl.html",'<form class="pure-form">\n  <div class="pure-g">\n    <div class="island pure-u-1">\n      <h1>Vraag 2</h1>\n\n      <h3>Vindt x</h3>\n    </div>\n    <div class="island pure-u-1 find-x">\n      <span class="before">5</span>\n      <span class="x" ng-click="question.x()">X</span>\n      <img src="assets/images/x.svg" alt="find x" width="300" class="middle">\n      <span class="below">6</span>\n    </div>\n    <div class="island pure-u-1">\n      <label>\n        Oplossing\n        <input class="pure-input-1" ng-model="question.myAnswer" type="text" required="">\n      </label>\n\n      <div ng-show="question.error">\n        <p>Dit is niet het juiste antwoord, probeer het nog eens</p>\n      </div>\n    </div>\n    <div class="island pure-u-1">\n      <input type="submit" ng-click="question.next()" value="Volgende"\n             class="pure-button button-xlarge button-expanded button-piet">\n    </div>\n  </div>\n</form>\n')}])}(),function(module){try{module=angular.module("templates")}catch(err){module=angular.module("templates",[])}module.run(["$templateCache",function($templateCache){"use strict";$templateCache.put("src/app/question01/question01.tpl.html",'<form class="pure-form">\n  <div class="pure-g">\n    <div class="island pure-u-1">\n      <h1>Vraag 1</h1>\n\n      <h3>Sinterklaasje kom maar binnen..</h3>\n    </div>\n    <div class="island pure-u-1">\n      <select ng-model="question.myAnswer" required>\n        <option value="">- Maak een keuze -</option>\n        <option ng-repeat="answer in question.answers" value="{{answer}}">{{answer}}</option>\n      </select>\n\n      <div ng-show="question.error">\n        <p>Dit is niet het juiste antwoord, probeer het nog eens</p>\n      </div>\n    </div>\n    <div class="island pure-u-1">\n      <input ng-click="question.next()" type="submit" value="Volgende"\n             class="pure-button button-xlarge button-expanded button-piet">\n    </div>\n  </div>\n</form>\n')}])}();
//# sourceMappingURL=data:application/json;base64,